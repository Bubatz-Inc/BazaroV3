@page "/calendar"
@using Bazaro.Web.Services.Commands.CalendarEntries
@using Bazaro.Web.Services.ViewModels
@using Blazored.Typeahead
@inject IHttpContextAccessor http
@inject CalendarService cs
@inject EntryService es
@inherits OwningComponentBase<UserManager<User>>

<h3>Calendar</h3>
<Button Type="@ButtonType.Primary" @onclick=@AddEntry>Add Entry</Button>
<Calendar Value="@PanelDate" OnSelect="((v) => {SelectedDate = v; PanelDate = v;})" OnPanelChange=@OnPanelChange DateCellRender="DateCellRender" />

@*Edit / Add Entry Modal*@
<Modal Title="@("Title")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       ConfirmLoading="@_confirmLoading">
    @if(SelectedEntry is not null) {
        <div>
            @SelectedEntry.StartDate.Date.ToLongDateString()
            <div>
                <BlazoredTypeahead SearchMethod="SearchEntryModels"
                        TValue="EntryModel"
                        TItem="EntryModel"
                        @bind-Value="selectedEntryModel"
                        placeholder="Select Note...">
                    <SelectedTemplate Context="entry">
                        @{
                            <text>@entry?.Title (Id: @entry?.Id)</text>
                        }
                    </SelectedTemplate> 
                    <ResultTemplate Context="entry">
                        @entry.Title (Id: @entry.Id)
                    </ResultTemplate>
                </BlazoredTypeahead>
                <div>
                    <RangePicker DefaultValue="new DateTime?[] { SelectedDate, null }" TValue="DateTime?[]" ShowTime='@("HH:mm")' OnChange="OnDateChange" />
                </div>
            </div>
            @if (EditMode)
            {
                <Button Type="@ButtonType.Primary" Color="Color.Red1" @onclick=@DeleteEntry>Delete</Button>
            }
        </div>
    }
</Modal>

@code
{
    private bool EditMode { get; set; } = false;
    private DateTime? selectedEntryStartDate { get; set; }
    private DateTime? selectedEntryEndDate { get; set; }

    private void OnDateChange(DateRangeChangedEventArgs args)
    {
        selectedEntryStartDate = args.Dates[0];
        selectedEntryEndDate = args.Dates[1];
    }

    private EntryModel selectedEntryModel { get; set; }
    private List<EntryModel> foundEntryModels { get; set; } = new List<EntryModel>
    {
        new EntryModel
        {
            Id = 1,
            Title = "Amogus",
            Description = "Crazy Description"
        },
        new EntryModel
        {
            Id = 2,
            Title = "Whoppy Charge",
            Description = "Crazy Description"
        },
        new EntryModel
        {
            Id = 3,
            Title = "What da Racoon doin",
            Description = "Crazy Description"
        } 
    };

    private async Task SelectedEntryModelChanged(EntryModel em)
    {
        selectedEntryModel = em;
    }

    private async Task<IEnumerable<EntryModel>> SearchEntryModels(string searchText) 
    {
        foundEntryModels = (await es.GetViewEntriesByTitle(new Services.Queries.Entries.GetEntriesByTitle.Query
            {
                Title = searchText,
                MaxCount = 25,
                UserId = await getCurrentUserId()
            })) ?? foundEntryModels;

        return foundEntryModels;
    } 

    private List<CalendarEntryModel> GetListDataTest(DateTime value)
    {
        List<CalendarEntryModel> listData = null;

        switch (value.Day)
        {
            case 8:
                listData = new List<CalendarEntryModel>
                {
                    new CalendarEntryModel { StartDate = value.AddHours(1), Entry = new EntryModel { Id = 1, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(2), Entry = new EntryModel { Id = 2, Title="Super Event" }},
                };
                break;
            case 10:
                listData = new List<CalendarEntryModel> {
                    new CalendarEntryModel { StartDate = value.AddHours(1), Entry = new EntryModel { Id = 3, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(2), Entry = new EntryModel { Id = 4, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(3), Entry = new EntryModel { Id = 5, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(4), Entry = new EntryModel { Id = 6, Title="Super Event" }},
                };
                break;
            case 15:
                listData = new List<CalendarEntryModel> {
                    new CalendarEntryModel { StartDate = value.AddHours(1), Entry = new EntryModel { Id = 7, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(2), Entry = new EntryModel { Id = 8, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(3), Entry = new EntryModel { Id = 9, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(4), Entry = new EntryModel { Id = 10, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(5), Entry = new EntryModel { Id = 11, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(6), Entry = new EntryModel { Id = 12, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(7), Entry = new EntryModel { Id = 13, Title="Super Event" }},
                    new CalendarEntryModel { StartDate = value.AddHours(8), Entry = new EntryModel { Id = 14, Title="Super Event" }},
                };
                break;
        }

        return listData ?? new List<CalendarEntryModel>();
    }

    private List<CalendarEntryModel> GetListData(DateTime value)
    {
        return calendarEntries?.Where(x => x.StartDate.Date == value.Date).ToList();
    }

    private string currentUserId = null;

    private RenderFragment DateCellRender(DateTime value)
    {
        List<CalendarEntryModel> listData = null;
        if (currentUserId is null)
        {
            listData = GetListDataTest(value);
        }
        else
        {
            listData = GetListData(value);
        }
        return
        @<Template>
        <ul class="events">
            @foreach (var data in listData)
                {
                    <li key="@data.Entry">
                        <div @onclick="@(() => {OnEventClick(data);})"> @data.StartDate.Hour : @data.StartDate.Minute - @data.Entry.Title </div>
                    </li>
                }
            </ul>
        </Template>
    ;
    }

    private List<CalendarEntryModel> calendarEntries { get; set; } = new();
    private DateTime SelectedDate = DateTime.Now;
    private DateTime PanelDate = DateTime.Now;
    private async Task LoadEntries()
    {
        var firstDay = new DateTime(PanelDate.Year, PanelDate.Month, 1);
        var userId = await getCurrentUserId();
        if (userId is null) return;
        calendarEntries = await cs.GetCalendarEntries(new Services.Queries.CalendarEntries.GetCalenderEntriesByUserId.Query
            {
                UserId = userId,
                StartDate = firstDay,
                EndDate = firstDay.AddMonths(1)
            });

        StateHasChanged();
    }

    private void OnPanelChange(DateTime value, string mode)
    {
        PanelDate = value;
    }

    private async Task<string> getCurrentUserId()
    {
        var username = http.HttpContext.User?.Identity.Name;
        if (username is null) return null;
        return (await Service.FindByNameAsync(username)).Id;
    }

    private CalendarEntryModel SelectedEntry = null;

    private void OnEventClick(CalendarEntryModel data)
    {
        EditMode = true;
        SelectedEntry = data;
        selectedEntryEndDate = data.EndDate;
        selectedEntryStartDate = data.StartDate;
        selectedEntryModel = data.Entry;
        ShowModal();
    }

    public void AddEntry()
    {
        EditMode = false;
        selectedEntryStartDate = SelectedDate;
        SelectedEntry = new CalendarEntryModel
        {
            StartDate = SelectedDate
        };
        ShowModal();
    }

    private int? GetMonthData(DateTime value)
    {
        if (value.Month == 8)
        {
            return 1394;
        }

        return null;
    }

    private RenderFragment MonthCellRender(DateTime value)
    {
        int? num = GetMonthData(value);

        if (num == null)
        {
            return null;
        }

        return
    @<Template>
        <div className="notes-month">
            <section>@num</section>
            <span>Backlog number</span>
        </div>
    </Template>
    ;
    }

    bool _visible = false;
    bool _confirmLoading = false;

    private void ShowModal()
    {
        _visible = true;
    }

    private async Task DeleteEntry()
    {
        if (SelectedEntry is null)
        {
            return;
        }

        _confirmLoading = true;

        await cs.Delete(new DeleteCalendarEntryById.Command
            {
                CalendarEntryId = SelectedEntry.Id
            });

        await LoadEntries();
        _confirmLoading = false;
        SelectedEntry = null;
        _visible = false;
    }

    private async Task SaveEntry()
    {
        if (selectedEntryStartDate is null) {
            return;
        }
        if (EditMode)
        {
            await cs.Update(new UpdateCalendarEntry.Command
                {
                    CalendarEntryId = SelectedEntry.Id,
                    EntryId = selectedEntryModel.Id,
                    StartDate = (DateTime)selectedEntryStartDate,
                    EndDate = selectedEntryEndDate
                });
        } else
        {
            await cs.Insert(new InsertCalendarEntry.Command
            {
                EntryId = selectedEntryModel.Id,
                StartDate = (DateTime)selectedEntryStartDate,
                EndDate = selectedEntryEndDate
            });   
        }

        await LoadEntries();
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        _confirmLoading = true;

        await SaveEntry();

        StateHasChanged();
        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await getCurrentUserId();
        await LoadEntries();
        await base.OnInitializedAsync();
    }
}

<Style>
    .events {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        .events .ant-badge-status {
            overflow: hidden;
            white-space: nowrap;
            width: 100%;
            text-overflow: ellipsis;
            font-size: 12px;
        }

    .notes-month {
        text-align: center;
        font-size: 28px;
    }

        .notes-month section {
            font-size: 28px;
        }
</Style>
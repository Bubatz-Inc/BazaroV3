@page "/NoteEditor/{EntryId:int}"
@using Bazaro.Web.Services
@using Bazaro.Web.Models
@using System.Text
@inject NavigationManager NavManager
@inject ItemService itemservice
@inject EntryService entryservice


<AuthorizeView>
    <Authorized>
@if(TextAreaError == 1)
{
    <Alert Type="@AlertType.Error"
       Message="Editor is empty"
       Description="The Editor must have some Text."
       ShowIcon="true" 
       Closable="true"
       Class=/>
}

@if(TitleError == 1)
{
    <Alert Type="@AlertType.Error"
       Message="Title is empty"
       Description="The Title must have a Value."
       ShowIcon="true" 
       Closable="true"
       Class=/>
}

<h3 class="p-2">Notes</h3>
<div class="p-2">
    <Input type="Text" class="editor container-fluid" @bind-Value=entry.Title></Input>
</div>
<div class="p-2">
    <TextArea Rows="50" @bind-Value=TextAreaValue > </TextArea>
</div>
<div class="p-2">
    <Button Type="@ButtonType.Primary" @onclick="() => ShowPreview()" >Show Preview!</Button>
    <Button Type="@ButtonType.Primary" @onclick="() => Save()" >Save</Button>
</div>

</Authorized>
    <NotAuthorized>
        <a>Unauthorized to view this page.</a>
    </NotAuthorized>
</AuthorizeView>

<style>
    .editor{
        height: 100%;
    }
</style>  

@code {

    [Parameter]
    public int EntryId { get; set; }

    //bind to this value
    public string TextAreaValue { get; set; }
    
    
    private EntryModel entry { get; set; }

    // used to display Error messeages for the inputs
    public int TitleError { get; set; }
    public int TextAreaError { get; set; }

    private async Task ShowPreview()
    {
        await Save();
        if((TextAreaValue != null) && (entry.Title != null))
            NavManager.NavigateTo("/NotePreview/" + @EntryId);
    }

    public async Task Save()
    {
        if(entry.Title != null)
        {
            await entryservice.Update(new Services.Commands.Entries.UpdateEntry.Command
                {
                    Description = entry.Description,
                    Id = entry.Id,
                    StartItemId = entry.StartItemId,
                    Title = entry.Title
                }
            );
             TitleError = 0;
             StateHasChanged();
        }
        else
        {
            TitleError = 1;
            StateHasChanged();
        }


        if(TextAreaValue != null)
        {
            await itemservice.Insert(new Services.Commands.Items.InsertItem.Command
                {
                    ContentTypeId = 1,
                    Content = Encoding.UTF8.GetBytes(TextAreaValue),
                    EntryId = EntryId
                }
            );
            TextAreaError = 0;
            StateHasChanged();
        }else {
            TextAreaError = 1;
            StateHasChanged();
        }
        StateHasChanged();
        ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {

        entry = new();
        entry = await entryservice.GetEntryById(new Services.Queries.Entries.GetEntryById.Query
            {
                Id = EntryId
            }
        );

        if(entry.StartItemId != null)
        {
            ItemModel item = new();
            item = await itemservice.GetViewItemByStartId((int)entry.StartItemId);
            TextAreaValue = Encoding.UTF8.GetString(item.Content);
        }

        await base.OnInitializedAsync();
    }
}
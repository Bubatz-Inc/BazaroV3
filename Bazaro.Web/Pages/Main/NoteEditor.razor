@page "/NoteEditor/{EntryId:int}"
@using Bazaro.Web.Services
@using Bazaro.Web.Models
@using System.Text
@inject NavigationManager NavManager
@inject ItemService itemservice
@inject EntryService entryservice


<AuthorizeView>
    <Authorized>
        @if(TextAreaError == 1)
        {
            <Alert Type="@AlertType.Error"
               Message="Editor is empty"
               Description="The Editor must have some Text."
               ShowIcon="true" 
               Closable="true"
               />
        }

        @if(TitleError == 1)
        {
            <Alert Type="@AlertType.Error"
               Message="Title is empty"
               Description="The Title must have a Value."
               ShowIcon="true" 
               Closable="true"
            />
        }

        @if(Saved == true)
        {
            <Alert Type="@AlertType.Success"
               Message="Saved"
               ShowIcon="true" 
               Closable="true"
               AfterClose="() => Saved = false"
               />
        }

<h3 class="p-2">Notes</h3>
<div class="p-2">
    <Input type="Text" class="editor container-fluid" @bind-Value=entry.Title></Input>
</div>
        @foreach(var item in Items)
        {
            <div class="p-2">
                <TextArea MinRows="4" @bind-Value=item.Content > </TextArea>
            </div>
        }
<div class="p-2">
    <Button Type="@ButtonType.Primary" @onclick="() => ShowPreview()" >Show Preview!</Button>
    <Button Type="@ButtonType.Primary" @onclick="() => Save()" >Save</Button>
    <Button Type="@ButtonType.Primary" @onclick="() => {
        Items.Add(new TextItem{ Content = String.Empty });
        StateHasChanged();
    }" >Add Item</Button>

</div>

</Authorized>
    <NotAuthorized>
        <a>Unauthorized to view this page.</a>
    </NotAuthorized>
</AuthorizeView>

<style>
    .editor{
        height: 100%;
    }
</style>  

@code {

    class TextItem
    {
        public int? ItemId;
        public string Content;
    }

    [Parameter]
    public int EntryId { get; set; }

    private EntryModel entry { get; set; }

    private List<TextItem> Items { get; set; } = new();

    // used to display Error messeages for the inputs
    private int TitleError { get; set; }
    private int TextAreaError { get; set; }
    private bool Saved {  get;  set; }

    private async Task ShowPreview()
    {
        await Save();
        if(entry.Title != null)
            NavManager.NavigateTo("/NotePreview/" + @EntryId);
    }

    public async Task Save()
    {
        if(entry.Title != null)
        {
            await entryservice.Update(new Services.Commands.Entries.UpdateEntry.Command
                {
                    Description = entry.Description,
                    Id = entry.Id,
                    StartItemId = entry.StartItemId,
                    Title = entry.Title
                }
            );
            Saved = true;
            TitleError = 0;
        }
        else
        {
            TitleError = 1;
        }

        foreach (var item in Items)
        {
            if (item.Content is null) continue;

            if (item.ItemId is null)
            {
                await itemservice.Insert(new Services.Commands.Items.InsertItem.Command
                    {
                        ContentTypeId = 1,
                        Content = Encoding.UTF8.GetBytes(item.Content),
                        EntryId = EntryId
                    }
                );
            } else
            {
                await itemservice.Update(new Services.Commands.Items.UpdateItem.Command
                    {
                        Content = Encoding.UTF8.GetBytes(item.Content),
                        ContentTypeId = 1,
                        Id = (int)item.ItemId
                    });
            }
        }
        Saved = true;
        await LoadEntry();
        StateHasChanged();
        ShouldRender();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadEntry();
    }

    private void AddTextItem(ItemModel i)
    {
        Items.Add(new TextItem
            {
                ItemId = i.Id,
                Content = Encoding.UTF8.GetString(i.Content)
            });
    }

    private async Task LoadEntry()
    {
        // load the entry
        entry = new();
        entry = await entryservice.GetEntryById(new Services.Queries.Entries.GetEntryById.Query
            {
                Id = EntryId
            }
        );
        // load the first item
        Items = new();
        ItemModel lastItem = null;
        if(entry.StartItemId != null)
        {
            ItemModel firstItem = new();
            firstItem = await itemservice.GetViewItemByStartId((int)entry.StartItemId);
            AddTextItem(firstItem);
            lastItem = firstItem;
        }

        while (lastItem?.NextItem != null)
        {
            AddTextItem(lastItem.NextItem);
            lastItem = lastItem.NextItem;
        }

        if (Items.Count == 0)
        {
            Items.Add(new TextItem { Content = "" });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}
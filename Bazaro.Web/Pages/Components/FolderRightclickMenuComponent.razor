@using System.Security.Claims
@using Bazaro.Web.Models
@using Bazaro.Web.Services
@using Bazaro.Web.Services.Commands.Entries
@using Bazaro.Web.Services.Commands.Folders
@using Bazaro.Web.Services.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject FolderService folderService
@inject EntryService entryService
@inject IHttpContextAccessor httpContext
@inject UserManager<User> userManager

<ContextMenu Id="FolderRightClick"> 
    <BlazorContextMenu.Item OnClick="@RenameFolderEvent">Rename</BlazorContextMenu.Item>
    <BlazorContextMenu.Item OnClick="@DeleteFolderEvent">Delete</BlazorContextMenu.Item>
    <BlazorContextMenu.Item OnClick="@ToggleMoveModal" >Move file to...</BlazorContextMenu.Item>
</ContextMenu>

<Modal Title="Rename Folder"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       ConfirmLoading="@_confirmLoading">
    <div>
        <label>Rename Folder</label>
        <Input @bind-Value="@_folderName"/>
    </div>
</Modal>
@if(_rootFolder is not null && _folderMoveModal && _selectedFolder is not null)
{
    @LoadTreeSelectModal()
}

@code {
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public FolderModel _rootFolder { get; set; }

    private bool _folderMoveModal = false;
    private FolderModel _selectedFolder;

    // Modal Parameters
    bool _visible = false;
    bool _confirmLoading = false;
    string _folderName = "";
    FolderModel _folder = new();

    private RenderFragment LoadTreeSelectModal()
    {
            return
    @<TreeSelectComponent _rootFolder=_rootFolder _visible=_folderMoveModal _folderToMove=_selectedFolder OnValidSubmit=ReturnCallback isEntry=false/>
    ;
    }

    // Runs when "Delete" is pressed on the right click context menu
    private async Task DeleteFolderEvent(ItemClickEventArgs e)
    {
        string userId = (await userManager
            .FindByNameAsync(httpContext.HttpContext.User.Identity.Name))
            .Id;

        int folderId = Convert.ToInt32(e.ContextMenuTrigger.Id);

        // Send query
        await folderService.Delete(new DeleteFolder.Command
            {
                Id = folderId,
                UserId = userId
            });
    }

    private async Task RenameFolderEvent(ItemClickEventArgs e)
    {
        // Get UserId
        string userId = (await userManager
            .FindByNameAsync(httpContext.HttpContext.User.Identity.Name))
            .Id;

        // Get folderID from rightclick
        int folderId = Convert.ToInt32(e.ContextMenuTrigger.Id);

        // GET FOLDER BY ID
        _folder = await folderService.GetViewFolderById(new Services.Queries.Folders.GetFolderById.Query
        {
            Id = folderId
        });

        _folderName = _folder.Title;
        ShowModal();
    }

    private void ShowModal()
    {
        _visible = true;
    }

    // OK for Rename modal
    private async Task HandleOk(MouseEventArgs e)
    {
        _confirmLoading = true;
        StateHasChanged();
        _visible = false;
        _confirmLoading = false;

        // Send query
        await folderService.Update(new UpdateFolder.Command
            {
                Id = _folder.Id,
                Title = _folderName
            });

        await OnValidSubmit.InvokeAsync();
    }

    // Cancel for Rename modal
    private async Task HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;

        await OnValidSubmit.InvokeAsync();
    }

    // Toggles the visibility of the "Moving Folder to..." modal
    private async Task ToggleMoveModal(ItemClickEventArgs e)
    {
        _folderMoveModal = !_folderMoveModal;
        int _selectedFolderId = Convert.ToInt32(e.ContextMenuTrigger.Id);

        _selectedFolder = await folderService.GetViewFolderById(new Services.Queries.Folders.GetFolderById.Query
        {
            Id = _selectedFolderId
        });
    }

    private async Task ReturnCallback()
    {
        _folderMoveModal = false;
        await OnValidSubmit.InvokeAsync();
    }
}
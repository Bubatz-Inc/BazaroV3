@inject NavigationManager Nav
@using Bazaro.Web.Pages.Components

@*   
------------------------------------
--- FOLDER & ENTRY NAV SIDEBAR -----
------------------------------------
*@

<div class="wrapper">
    <Menu Style="width: 256px; height: 100%; margin-left: 58px;"
          Class="sidebar"
          Theme=theme
          Mode=@MenuMode.Inline>
          <MenuItem Disabled=true>
            <h4 style="color: white;">Workspace</h4>
          </MenuItem>
          <MenuDivider/>
            <div class="container">
                <div class="row" style="margin-top: 15px">

                    @* ADD ENTRY BUTTON *@
                    <div class="col">
                        @if (_entryAddLoading || _folders is null)
                        {
                            @* Entry is being added (Loading Icon)*@
                            <Button Type="@ButtonType.Primary" Style="width: 100%;" Disabled=true Icon="loading"/>
                        }
                        else if(_folderAddLoading)
                        {
                            @* Folder is being added (Disabled) *@
                            <Button Type="@ButtonType.Primary" Style="width: 100%;" Icon="file-add" Disabled=true/>
                        }
                        else
                        {
                            @* Creating Entry is clickable (Available) *@
                            <Button Type="@ButtonType.Primary" Style="width: 100%;" @onclick="@(() => CreateEntry())" Icon="file-add"/>
                        }
                    </div>

                    @* ADD FOLDER BUTTON *@
                    <div class="col">
                        @if (_folderAddLoading || _orphanEntries == null)
                        {
                            @* Folder is being added (Loading Icon)*@
                            <Button Type="@ButtonType.Primary" Style="width: 100%;" Icon="loading" Disabled=true/>
                        }
                        else if(_entryAddLoading)
                        {
                            @* Entry is being added (Disabled) *@
                            <Button Type="@ButtonType.Primary" Style="width: 100%;" Icon="folder-add" Disabled=true/>
                        }
                        else
                        {
                            @* Creating Folder is clickable (Available) *@
                            <Button Type="@ButtonType.Primary" Style="width: 100%;" @onclick="@(() => CreateFolder())" Icon="folder-add"/>
                        }
                    </div>
                </div>
            </div>

          @* Loading Icon if data is being loaded *@
          @if(_folders is null && _orphanEntries == null)
            {
                <MenuItem>
                    <div class="container">
                        <div class="row">
                            <Icon Type="loading" Theme="outline"/>
                        </div>
                    </div>
                </MenuItem>
            }
            else
            {
                @RenderFolderTree(_folders)
            }

          @* Load Ophan (root level) entries *@
          @if(_orphanEntries is not null)
          {
            @foreach(var entry in _orphanEntries)
            {
                <ContextMenuTrigger Data="@entry.Id" MenuId="EntryRightClick" Id="@entry.Id.ToString()">
                    <MenuItem Key="@entry.Id.ToString()" @onclick="() => OpenEntry(entry.Id)">📋 @entry.Title</MenuItem>  
                </ContextMenuTrigger>
            }   
          }
    </Menu>
</div>

@* Right click menus (RENAME, DELETE, MOVE TO) *@
<FolderRightclickMenu OnValidSubmit="RefreshData" _rootFolder=_rootFolder/>
<EntryRightclickMenu OnValidSubmit="RefreshData" _rootFolder=_rootFolder/>

@code
{
    MenuTheme theme = MenuTheme.Dark;

    // Root folder (contains all subfolders)
    private FolderModel _rootFolder = null;

    // Folders displayed on the sidebar
    private List<FolderModel> _folders;

    // Entries of with root folder as parent
    private List<EntryModel> _orphanEntries;

    // Button loading animation lock variables
    private bool _folderAddLoading = false;
    private bool _entryAddLoading = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshData();
            StateHasChanged();
        }
    }

    /* ------------------------------------
     * -------- FOLDER TREE LOGIC ---------
     * ------------------------------------
     */

    private async Task RefreshData()
    {
        await LoadFolders();
        _folders = await LoadEntries(_folders);
        await LoadOrphanEntries();
    }

    private async Task LoadFolders()
    {
        var userId = await GetCurrentUserId();

        // Load root folder
        _rootFolder = await folderService.GetViewFolderStructureByUserId(new Services.Queries.Folders.GetViewSubfoldersStructureByUserId.Query
        {
            UserId = userId,
            FolderId = null,
        });

        if(_rootFolder.SubFolders is not null)
        {
            // Load subfolders into folders using recursive method
            _folders = await LoadFoldersAndSubFolders(_rootFolder.SubFolders);
        }
        else
        {
            // Instance empty list (if user doesnt have any folders)
            _folders = new();
        }
    }

    // Recursive method to return folders and fill subfolders with subfolders
    private async Task<List<FolderModel>> LoadFoldersAndSubFolders(List<FolderModel> folders)
    {
        var userId = await GetCurrentUserId();

        List<FolderModel> returnFolders = new();

        foreach(var folder in folders)
        {
            // Fill subfolders from querry into local folder.Subfolders
            folder.SubFolders = (await folderService.GetViewFolderStructureByUserId(new Services.Queries.Folders.GetViewSubfoldersStructureByUserId.Query
            {
                UserId = userId,
                FolderId = folder.Id    
            })).SubFolders;

            if(folder.SubFolders is not null)
            {
                folder.SubFolders = await LoadFoldersAndSubFolders(folder.SubFolders);
            }
            returnFolders.Add(folder);
        }
        return returnFolders;
    }

    // Loads Entries into folders to be displayed in the sidebar
    private async Task<List<FolderModel>> LoadEntries(List<FolderModel> folders)
    {
        List<FolderModel> localFolders = folders;

        var userId = await GetCurrentUserId();

        foreach(var folder in folders)
        {
            if(folder.SubFolders is not null)
            {
                folder.SubFolders = await LoadEntries(folder.SubFolders);
            }

            List<EntryModel> folderEntries = await entryService.GetViewEntriesByFolderId(new Services.Queries.Entries.GetViewEntriesByFolderId.Query
                {
                    FolderId = folder.Id,
                    UserId = userId
                });

            var updatedFolder = localFolders.FirstOrDefault(f => f.Id == folder.Id);
            updatedFolder.Entries = folderEntries;
        }

        return localFolders;
    }

    // Load entries that do not have a folder
    private async Task LoadOrphanEntries()
    {
        var userId = await GetCurrentUserId();

        _orphanEntries = await entryService.GetViewEntriesByFolderId(new Services.Queries.Entries.GetViewEntriesByFolderId.Query
        {
            FolderId = _rootFolder.Id,
            UserId = userId
        });
    }

    /* ------------------------------------
     * ------ FOLDER TREE RENDERING -------
     * ------------------------------------
     */

    // Render fragment for tree view
    private RenderFragment RenderFolderTree(List<FolderModel> folders)
    {
        return 
        @<div>
            @foreach(var folder in folders)
            {
                if(!folder.IsDeleted)
                {
                    <ContextMenuTrigger Data="@folder.Id" MenuId="FolderRightClick" Id="@folder.Id.ToString()">
                        @{string title = "📁" + folder.Title;}
                        <AntDesign.SubMenu Key="@folder.Id.ToString()" Title="@title">
                            @if(folder.Entries is not null)
                            {
                                @foreach(var entry in folder.Entries)
                                {
                                    <ContextMenuTrigger Data="@entry.Id" MenuId="EntryRightClick" Id="@entry.Id.ToString()">
                                        <MenuItem Key="@entry.Id.ToString()" @onclick="() => OpenEntry(entry.Id)">📋 @entry.Title</MenuItem>  
                                    </ContextMenuTrigger>
                                }
                            }
                            @* Render subfolders *@
                            @if(folder.SubFolders is not null && folder.SubFolders.Count != 0)
                            {
                                @RenderFolderTree(folder.SubFolders);
                            }
                        </AntDesign.SubMenu>
                    </ContextMenuTrigger>
                }
            }
        </div>
    ;
    }

    /* ------------------------------------
     * ------ OTHER LOGIC -------
     * ------------------------------------
     */

    private void OpenEntry(int entryId)
    {
        Nav.NavigateTo($"/noteeditor/{entryId}");
    }

    private async Task<string> GetCurrentUserId()
    {
        var username = httpContext.HttpContext.User.Identity.Name;
        return (await userManager.FindByNameAsync(username)).Id;
    }

    /* ------------------------------------
     * ------------ DB QUERIES ------------
     * ------------------------------------
    */

    // Query to create new Note / Entry
    private async Task CreateEntry(int? folderId = null)
    {
        _entryAddLoading = true;
        // Check if FolderID was specified (create entry in root if not)
        if(folderId is null)
        {
            folderId = _rootFolder.Id;
        }

        // Send query
        await entryService.Insert(new InsertEntry.Command
        {
            Title = "New Note",
            Description = "",
            FolderId = (int)folderId
        });

        await RefreshData();
        _entryAddLoading = false;
    }

    // Query to create new Folder
    private async Task CreateFolder(int? previousFolderId = null)
    {
        _folderAddLoading = true;
        if(previousFolderId is null)
        {
            previousFolderId = _rootFolder.Id;
        }

        string userId = (await userManager
            .FindByNameAsync(httpContext.HttpContext.User.Identity.Name))
            .Id;

        // Send query
        await folderService.Insert(new InsertFolder.Command
        {
            PreviousFolder = previousFolderId,
            Title = "New Folder",
            Description = "",
            UserId = userId
        });

        await RefreshData();
        _folderAddLoading = false;
    }
}
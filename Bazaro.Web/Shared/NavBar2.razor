@using System.Security.Claims
@using Bazaro.Web.Models
@using Bazaro.Web.Services
@using Bazaro.Web.Services.Commands.Entries
@using Bazaro.Web.Services.Commands.Folders
@using Bazaro.Web.Services.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject FolderService fs
@inject EntryService es
@inject IHttpContextAccessor http
@inject UserManager<User> um

<Menu Style="width: 256px;"
      DefaultSelectedKeys=@(new[] { "1" })
      DefaultOpenKeys=@(new[] { "sub1" })
      Mode=@MenuMode.Inline>
      <MenuItemGroup>
        <MenuItem>
            <Button @onclick="CreateEntry">Create Entry</Button>
        </MenuItem>
        <MenuItem>
            <Button @onclick="CreateFolder">Create Folder</Button>
        </MenuItem>
      </MenuItemGroup>
      @RenderFolderTree(_folders)
</Menu>

@code
{
    RenderFragment sub1Title =
    @<span>
        <Icon Type="mail" Theme="outline"></Icon>
        <span>Navigation One</span>
    </span>;

    RenderFragment sub2Title =
    @<span>
        <Icon Type="appstore" Theme="outline"></Icon>
        <span>Navigation Two</span>
    </span>;

    RenderFragment sub4Title =
    @<span>
        <Icon Type="setting" Theme="outline"></Icon>
        <span>Navigation Three</span>
        </span>
        ;


    private List<FolderModel> _folders = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFolders();
    }

    // Render fragment for tree view
    private RenderFragment RenderFolderTree(List<FolderModel> folders)
    {
        return 
        @<div>
            @foreach(var folder in folders)
            {
                <MenuItemGroup Key="@folder.Id.ToString()" Title="@folder.Title">
                @if(folder.Entries is not null)
                {
                    @foreach(var entry in folder.Entries)
                    {
                        <MenuItem Key="@entry.Id.ToString()">@entry.Title</MenuItem>
                    }
                    @if(folder.SubFolders is not null)
                    {
                        RenderFolderTree(folder.SubFolders);
                    }        
                }
                </MenuItemGroup>
            }
        </div>
    ;
    }

    private async Task LoadFolders()
    {
        // Get userID to retrieve folders and entries from the DB
        var username = http.HttpContext.User.Identity.Name;
        var userId = (await um.FindByNameAsync(username)).Id;

        var toplvlFolders = await fs.GetViewFolderStructureByuserId(userId);
        _folders = await LoadFolders(toplvlFolders);
    }

    private async Task<List<FolderModel>> LoadFolders(List<FolderModel> folders)
    {
        List<FolderModel> returnFolders = new();

        foreach(var folder in folders)
        {
            if(folder.SubFolders is not null)
            {
                folder.SubFolders = await LoadFolders(folder.SubFolders);
            }
            returnFolders.Add(folder);
        }
        return returnFolders;
    }

    private async Task LoadFolderEntries(FolderModel folder)
    {
        folder.Entries = await es.GetViewEntriesByFolderId(folder.Id);
    }

    private async Task CreateEntry()
    {
        // Create new entry(note)
        await es.Insert(new InsertEntry.Command
        {
            Title = "New Note",
            Description = ""
        });

        await LoadFolders();
    }

    private async Task CreateFolder()
    {
        string userId = (await um
            .FindByNameAsync(http.HttpContext.User.Identity.Name))
            .Id;

        // Create new note
        await fs.Insert(new InsertFolder.Command
        {
            Title = "New Folder",
            Description = "",
            UserId = userId
        });

        await LoadFolders();
    }
}
@using System.Security.Claims
@using Bazaro.Web.Models
@using Bazaro.Web.Services
@using Bazaro.Web.Services.Commands.Entries
@using Bazaro.Web.Services.Commands.Folders
@using Bazaro.Web.Services.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject FolderService folderService
@inject EntryService entryService
@inject IHttpContextAccessor httpContext
@inject UserManager<User> userManager
@inject NavigationManager Nav

<div class="wrapper">
    <Menu Style="width: 256px; height: 100%; margin-left: 58px;"
          class="sidebar"
          Theme=theme
          DefaultSelectedKeys=@(new[] { "1" })
          DefaultOpenKeys=@(new[] { "sub1" })
          Mode=@MenuMode.Inline>
                <MenuItem>
                    <Button @onclick="@(() => CreateEntry())" Icon="file-add"/>
                    <Button @onclick="@(() => CreateFolder())" Icon="folder-add"/>
                </MenuItem>
          @RenderFolderTree(_folders)
          @foreach(var entry in _toplvlEntries)
          {
            <ContextMenuTrigger Data="@entry.Id" MenuId="EntryRightClick" Id="@entry.Id.ToString()">
                <MenuItem Key="@entry.Id.ToString()" @onclick="() => OpenEntry(entry.Id)">@entry.Title</MenuItem>  
            </ContextMenuTrigger>
          }
    </Menu>
</div>

<FolderRightclickMenuComponent OnValidSubmit="LoadFolders" _rootFolder=_rootFolder/>
<EntryRightclickMenuComponent OnValidSubmit="RefreshData" />

@code
{
    MenuTheme theme = MenuTheme.Dark;

    private FolderModel _rootFolder = null;
    private List<FolderModel> _folders = new();
    private List<EntryModel> _toplvlEntries = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadFolders();
        await LoadOrphanEntries();
    }

    private async Task LoadFolders()
    {
        // Get userID to retrieve folders and entries from the DB
        var username = httpContext.HttpContext.User.Identity.Name;
        var userId = (await userManager.FindByNameAsync(username)).Id;

        // Load root folder

        _rootFolder = await folderService.GetViewFolderStructureByUserId(new Services.Queries.Folders.GetViewSubfoldersStructureByUserId.Query
        {
            UserId = userId,
            FolderId = null,
        });

        if(_rootFolder.SubFolders is not null)
        {
            // Load subfolders into folders using recursive method
            _folders = LoadFoldersAndSubFolders(_rootFolder.SubFolders);
        }
    }

    // Load entries that do not have a folder
    private async Task LoadOrphanEntries()
    {
        var username = httpContext.HttpContext.User.Identity.Name;
        var userId = (await userManager.FindByNameAsync(username)).Id;

        _toplvlEntries = await entryService.GetViewEntriesByFolderId(new Services.Queries.Entries.GetViewEntriesByFolderId.Query
        {
            FolderId = _rootFolder.Id,
            UserId = userId
        });
    }

    private async Task OpenEntry(int entryId)
    {
        Nav.NavigateTo($"/noteeditor/{entryId}");
    }

    // Recursive method to return folders and fill subfolders with subfolders
    private List<FolderModel> LoadFoldersAndSubFolders(List<FolderModel> folders)
    {
        List<FolderModel> returnFolders = new();

        foreach(var folder in folders)
        {
            if(folder.SubFolders is not null)
            {
                folder.SubFolders = LoadFoldersAndSubFolders(folder.SubFolders);
            }
            returnFolders.Add(folder);
        }
        return returnFolders;
    }

    // Render fragment for tree view
    private RenderFragment RenderFolderTree(List<FolderModel> folders)
    {
        return 
        @<div>
            @foreach(var folder in folders)
            {
                <ContextMenuTrigger Data="@folder.Id" MenuId="FolderRightClick" Id="@folder.Id.ToString()">
                <AntDesign.SubMenu Key="@folder.Id.ToString()" Title="@folder.Title" OnTitleClick="() => LoadFolderDataOnClick(folder)">
                @if(folder.Entries is not null)
                {
                    @foreach(var entry in folder.Entries)
                    {
                            <MenuItem Key="@entry.Id.ToString()">@entry.Title</MenuItem>
                    }
                    @if(folder.SubFolders is not null)
                    {
                        RenderFolderTree(folder.SubFolders);
                    }        
                }
                </AntDesign.SubMenu>
                </ContextMenuTrigger>
            }
        </div>
    ;
    }


    // Loads a given folder's entries
    private async Task LoadFolderDataOnClick(FolderModel folder)
    {
        if(folder.Entries is null)
        {
            folder.Entries = await entryService.GetViewEntriesByFolderId(new Services.Queries.Entries.GetViewEntriesByFolderId.Query{
                FolderId = folder.Id
            });

            if(folder.Entries is null)
            {
                folder.Entries = new();
            }

            if(folder.SubFolders is null)
            {
               // Get userID to retrieve folders and entries from the DB
                var username = httpContext.HttpContext.User.Identity.Name;
                var userId = (await userManager.FindByNameAsync(username)).Id;

                // Load root folder

                folder.SubFolders = (await folderService.GetViewFolderStructureByUserId(new Services.Queries.Folders.GetViewSubfoldersStructureByUserId.Query
                {
                    UserId = userId,
                    FolderId = folder.Id,
                })).SubFolders;
            }
        }
    }

    // Query to create new Note / Entry
    private async Task CreateEntry(int? folderId = null)
    {
        // Check if FolderID was specified (create entry in root if not)
        if(folderId is null)
        {
            folderId = _rootFolder.Id;
        }

        // Send query
        await entryService.Insert(new InsertEntry.Command
        {
            Title = "New Note",
            Description = "",
            FolderId = (int)folderId
        });

        await LoadFolders();
    }

    // Query to create new Folder
    private async Task CreateFolder(int? previousFolderId = null)
    {
        if(previousFolderId is null)
        {
            previousFolderId = _rootFolder.Id;
        }

        string userId = (await userManager
            .FindByNameAsync(httpContext.HttpContext.User.Identity.Name))
            .Id;

        // Send query
        await folderService.Insert(new InsertFolder.Command
        {
            PreviousFolder = previousFolderId,
            Title = "New Folder",
            Description = "",
            UserId = userId
        });

        await LoadFolders();
    }
}